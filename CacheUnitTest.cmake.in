#---------------------------------------------------------------------------
# Copyright 2011-2012 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------
include(@VISTA_SOURCE_DIR@/CommonFunctions.cmake)
#define a variable to store the final log file name & path
set(LOGFILENAME "@UNITTEST_LOG_DIR@/@package_file_name@.log")
set(RoutineImportFile "@SCRIPT_OUTPUT_DIR@/UnitTestRoutines.ro")
set(LogDir "@UNITTEST_LOG_DIR@/Testing/Log")
file(MAKE_DIRECTORY "${LogDir}")
message(STATUS "Collecting Unit Testing Routines...")
file(GLOB
     UNIT_TEST_FILES
     "@VISTA_SOURCE_DIR@/UnitTest/VistA-FOIA/Packages/@package_name@/*.m")
execute_process(COMMAND "@PYTHON_EXECUTABLE@"
                        @OSEHRA_PATH@/Scripts/PackRO.py
                        ${UNIT_TEST_FILES}
                        WORKING_DIRECTORY @VISTA_SOURCE_DIR@
                        OUTPUT_FILE ${RoutineImportFile})
message(STATUS "Importing Unit Testing Routines...")
execute_process(COMMAND "@CTerm@" "/console=cn_iptcp:127.0.0.1[23]"
                        "@VISTA_BINARY_DIR@/RoutineImport.scp"
                        "${LogDir}/ImportUnitTestRoutines.log"
                        "${RoutineImportFile}")

message(STATUS "Running Unit Testing Routines...")
#Test the total length of the whole path of the log file
#make sure it is within 120 (logfile:also takes 8 chars)
string(LENGTH ${LOGFILENAME} LOGFILENAME_LEN)
if (LOGFILENAME_LEN GREATER 120)
  # execute CMake -E md5sum on input scp script to get MD5 Hash in 32 chars
  execute_process(COMMAND ${CMAKE_COMMAND} "-E" "md5sum"
                          "@SCRIPT_OUTPUT_DIR@/@package_file_name@.scp"
                  OUTPUT_VARIABLE MD5)
  string(REGEX MATCH "^[0-9a-f]+" MD5 "${MD5}")
  # this is not perfect, but should be good enough for now
  set(NEWLOGFILENAME "@VISTA_BINARY_DIR@/${MD5}")
  #message("New log file name is ${NEWLOGFILENAME}")
  execute_process(COMMAND "@CTerm@" "/console=cn_iptcp:127.0.0.1[23]"
                          "@SCRIPT_OUTPUT_DIR@/@package_file_name@.scp"
                          "${NEWLOGFILENAME}"
                  RESULT_VARIABLE return
                  ERROR_VARIABLE ERROR)
  # move the log file to the new place
  file(RENAME "${NEWLOGFILENAME}" "${LOGFILENAME}")
else()
  execute_process(COMMAND "@CTerm@" "/console=cn_iptcp:127.0.0.1[23]"
                          "@SCRIPT_OUTPUT_DIR@/@package_file_name@.scp"
                          "${LOGFILENAME}"
                  RESULT_VARIABLE return
                  ERROR_VARIABLE ERROR)
endif()


if(NOT return EQUAL 1)
  file(READ ${LOGFILENAME} contents)
  set(errorMsg "Error running CTerm:\nReturn Value = ")
  set(errorMsg "${errorMsg} ${return}\n${contents}\n${ERROR}")
  message(FATAL_ERROR errorMsg)
endif()
file(STRINGS "${LOGFILENAME}" OUTPUT)
ReportUnitTestResult(@package_file_name@ @VISTA_SOURCE_DIR@ "${OUTPUT}")
