#---------------------------------------------------------------------------
# Copyright 2011 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------
include(@VISTA_SOURCE_DIR@/CommonFunctions.cmake)
#define a variable to store the final log file name & path
set(LOGFILENAME "@VISTA_BINARY_DIR@/Testing/Temporary/@package_file_name@Test.log")
#Test the total length of the whole path of the log file to make sure it is within 120 (logfile:also takes 8 chars)
string(LENGTH ${LOGFILENAME} LOGFILENAME_LEN)
if (LOGFILENAME_LEN GREATER 120)
  # execute CMake -E md5sum on input scp script to get MD5 Hash in 32 chars
  execute_process(COMMAND ${CMAKE_COMMAND} "-E" "md5sum" "@VISTA_BINARY_DIR@/Testing/@package_file_name@Test.scp"
                  OUTPUT_VARIABLE MD5)
  string(REGEX MATCH "^[0-9a-f]+" MD5 "${MD5}")
  # this is not perfect, but should be good enough for now
  set(NEWLOGFILENAME "@VISTA_BINARY_DIR@/${MD5}")
  #message("New log file name is ${NEWLOGFILENAME}")
  execute_process(COMMAND "@CTerm@" "/console=cn_iptcp:127.0.0.1[23]" "@VISTA_BINARY_DIR@/Testing/@package_file_name@Test.scp" "${NEWLOGFILENAME}"
    RESULT_VARIABLE return ERROR_VARIABLE ERROR)
  # move the log file to the new place
  file(RENAME "${NEWLOGFILENAME}" "${LOGFILENAME}")

else()
  execute_process(COMMAND "@CTerm@" "/console=cn_iptcp:127.0.0.1[23]" "@VISTA_BINARY_DIR@/Testing/@package_file_name@Test.scp" "${LOGFILENAME}"
  RESULT_VARIABLE return ERROR_VARIABLE ERROR)
endif()


if(NOT return EQUAL 1)
  file(READ ${LOGFILENAME} contents)
  message(FATAL_ERROR "Error running CTerm:\nReturn Value = ${return}\n${contents}\n${ERROR}")
endif()
file(STRINGS "${LOGFILENAME}" OUTPUT)
string(REPLACE "[" "{" OUTPUT "${OUTPUT}" )
string(REPLACE "]" "}" OUTPUT "${OUTPUT}" )
ReportXINDEXResult(@package_file_name@ @VISTA_SOURCE_DIR@ "${OUTPUT}")
