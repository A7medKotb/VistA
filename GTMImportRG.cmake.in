#---------------------------------------------------------------------------
# Copyright 2011 The Open Source Electronic Health Record Agent
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#---------------------------------------------------------------------------
macro(CheckResult Result Message)
  if(NOT "${Result}" EQUAL 0)
    message(FATAL_ERROR  "ERROR: ${Message}")
  endif()
endmacro()

message(STATUS "Removing database.dat in Directory @VISTA_GLOBALS_DIR@")
file(REMOVE @VISTA_GLOBALS_DIR@/database.dat )
message(STATUS "Removing Routine files from @VISTA_ROUTINE_DIR@")
file(REMOVE_RECURSE @VISTA_ROUTINE_DIR@/)
file(MAKE_DIRECTORY @VISTA_ROUTINE_DIR@)
message(STATUS "Collecting routines...")
execute_process(COMMAND "@GIT_EXECUTABLE@" ls-files "*.m" COMMAND "@PYTHON_EXECUTABLE@" Scripts/PackRO.py WORKING_DIRECTORY @OSEHRA_PATH@ OUTPUT_FILE routines.ro RESULT_VARIABLE return)
CheckResult(return "Routine Packing Failed")
message(STATUS "Collecting globals...")
execute_process(COMMAND "@GIT_EXECUTABLE@" ls-files "*.zwr" WORKING_DIRECTORY @OSEHRA_PATH@ OUTPUT_FILE globals.lst RESULT_VARIABLE return)
CheckResult(return "Global Packing Failed")
file(MAKE_DIRECTORY "@VISTA_BINARY_DIR@/Testing/Log")
message(STATUS "Creating a new database.dat in @VISTA_GLOBALS_DIR@")
execute_process(COMMAND mupip create  WORKING_DIRECTORY @VISTA_GLOBALS_DIR@/ RESULT_VARIABLE return )
CheckResult(return "mupip create Failed")
execute_process(COMMAND dse change -f -key_max=1023 -rec=4096 WORKING_DIRECTORY @VISTA_GLOBALS_DIR@/  RESULT_VARIABLE return )
CheckResult(return "Database Configuration Failed")
message(STATUS "Importing routines...")
execute_process(COMMAND @EXPECT_EXEC@ -f @VISTA_BINARY_DIR@/RoutineImportGTM.exp RESULT_VARIABLE return )
CheckResult(return "Routine Import Failed")
message(STATUS "Importing globals and Initializing")
execute_process(COMMAND @EXPECT_EXEC@ -f @VISTA_BINARY_DIR@/GlobalImportandInitializeGTM.exp RESULT_VARIABLE return)
CheckResult(return "Global Import/Initialization Failed")
